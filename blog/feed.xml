<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>64 Bites Blog</title>
  <subtitle>Articles About Programming The C64</subtitle>
  <id>http://64bites.com/blog</id>
  <link href="http://64bites.com/blog"/>
  <link href="http://64bites.com/blog/feed.xml" rel="self"/>
  <updated>2016-04-14T00:00:00+00:00</updated>
  <author>
    <name>Michal Taszycki</name>
  </author>
  <entry>
    <title>Behind the Scenes - Part 2</title>
    <link rel="alternate" href="http://64bites.com/blog/2016/04/14/behind-the-scenes-part-2/"/>
    <id>http://64bites.com/blog/2016/04/14/behind-the-scenes-part-2/</id>
    <published>2016-04-14T00:00:00+00:00</published>
    <updated>2019-12-06T23:33:59+00:00</updated>
    <author>
      <name>Michal Taszycki</name>
    </author>
    <content type="html">&lt;p&gt;After the second day of work, the episode is done! It is also my second day of using Snapchat.&lt;/p&gt;

&lt;p&gt;See how I record and edit audio and video for one 64bites episode.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update: Here's the &lt;a href="http://64bites.com/blog/2016/04/13/behind-the-scenes-part-1/"&gt;first part&lt;/a&gt;. You can also watch the &lt;a href="http://64bites.com/episodes/047-custom-character-set"&gt;finished episode&lt;/a&gt; for free.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="Video Editing in Screenflow" src="../assets/images/blog/007/screenflow.png" /&gt;&lt;/p&gt;

&lt;h2 id="this-snapchat-thing-is-pretty-fun"&gt;This Snapchat thing is pretty fun!&lt;/h2&gt;

&lt;p&gt;Recording and immediately publishing 10-second videos from time to time feels liberating. There is no need for special preparations, writing scripts, etc. You just record and send. If you don't record it externally, it will disappear after 24 hours.&lt;/p&gt;

&lt;p&gt;It feels strangely comfortable to me, and I think I'll be using Snapchat in the future.&lt;/p&gt;

&lt;p&gt;Feel free to install Snapchat and add me (&lt;a href="https://www.snapchat.com/add/mehowte"&gt;mehowte&lt;/a&gt;) if you want to see what I am working on.&lt;/p&gt;

&lt;h2 id="watch-the-second-part-of-behind-the-scenes-video"&gt;Watch the second part of 'Behind the Scenes' video&lt;/h2&gt;

&lt;p&gt;Below is the video of the second day of work. It shows how I record the audio track, cut failed attempts, record and edit the video and why I use Sublime Text instead of Vim.&lt;/p&gt;

&lt;script src="https://fast.wistia.com/embed/medias/35gdc0l6ps.jsonp" async=""&gt;&lt;/script&gt;
&lt;script src="https://fast.wistia.com/assets/external/E-v1.js" async=""&gt;&lt;/script&gt;
&lt;div class="wistia_responsive_padding" style="padding:62.5% 0 0 0;position:relative;"&gt;&lt;div class="wistia_responsive_wrapper" style="height:100%;left:0;position:absolute;top:0;width:100%;"&gt;&lt;div class="wistia_embed wistia_async_35gdc0l6ps videoFoam=true" style="height:100%;width:100%"&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

</content>
  </entry>
  <entry>
    <title>Behind the Scenes - Part 1</title>
    <link rel="alternate" href="http://64bites.com/blog/2016/04/13/behind-the-scenes-part-1/"/>
    <id>http://64bites.com/blog/2016/04/13/behind-the-scenes-part-1/</id>
    <published>2016-04-13T00:00:00+00:00</published>
    <updated>2019-12-06T23:33:59+00:00</updated>
    <author>
      <name>Michal Taszycki</name>
    </author>
    <content type="html">&lt;p&gt;Did you know that a &lt;strong&gt;five-minute&lt;/strong&gt; video can take even &lt;strong&gt;two days&lt;/strong&gt; to make?&lt;/p&gt;

&lt;p&gt;Let me show you how I make a new episode from scratch.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update: Here's the &lt;a href="http://64bites.com/blog/2016/04/14/behind-the-scenes-part-2/"&gt;second part&lt;/a&gt;. You can also watch the &lt;a href="http://64bites.com/episodes/047-custom-character-set"&gt;finished episode&lt;/a&gt; for free.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="Behind the Scenes" src="../assets/images/blog/006/behind-the-scenes.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;I always wanted to record a behind-the-scenes video to show you what it takes to create a single 64bites episode. But I never got around to set up camera, lighting and rehearse the whole thing.&lt;/p&gt;

&lt;p&gt;In time, I began to realize that it's never going to happen.&lt;/p&gt;

&lt;p&gt;By coincidence, my friend has started using Snapchat, and he is pushing fellow programmers to join him as well. &lt;/p&gt;

&lt;p&gt;Suddenly, it occurred to me, that it might be the perfect medium for the behind the scenes video.&lt;/p&gt;

&lt;h2 id="wait-programmers-using-snapchat-thats-crazy"&gt;Wait… Programmers using Snapchat? That's crazy!&lt;/h2&gt;

&lt;p&gt;I know, right? The first thing I wanted to do after opening up the app for the first time was to uninstall it.&lt;/p&gt;

&lt;p&gt;But then I thought:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Isn't that how my grandpa felt sending a text for the first time? I'm getting old!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So I decided to go all in and record the whole process of creating a new video from scratch. It was not easy at first, mainly because I used a five-year old phone to record videos.&lt;/p&gt;

&lt;p&gt;But it got easier, and by the end of the day, recording a 10-second video felt natural.&lt;/p&gt;

&lt;h2 id="watch-the-first-part"&gt;Watch the first part&lt;/h2&gt;

&lt;p&gt;Below is the video of the first day of work. But I highly recommend to install Snapchat and add me (&lt;a href="https://www.snapchat.com/add/mehowte"&gt;mehowte&lt;/a&gt;) to see the second part live.&lt;/p&gt;

&lt;p&gt;It's much more fun, this way:)&lt;/p&gt;

&lt;script src="https://fast.wistia.com/embed/medias/n4ocmutmtr.jsonp" async=""&gt;&lt;/script&gt;
&lt;script src="https://fast.wistia.com/assets/external/E-v1.js" async=""&gt;&lt;/script&gt;
&lt;div class="wistia_responsive_padding" style="padding:62.5% 0 0 0;position:relative;"&gt;&lt;div class="wistia_responsive_wrapper" style="height:100%;left:0;position:absolute;top:0;width:100%;"&gt;&lt;div class="wistia_embed wistia_async_n4ocmutmtr videoFoam=true" style="height:100%;width:100%"&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

</content>
  </entry>
  <entry>
    <title>Are you an 8-Bit Kid?</title>
    <link rel="alternate" href="http://64bites.com/blog/2016/04/07/are-you-an-8-bit-kid/"/>
    <id>http://64bites.com/blog/2016/04/07/are-you-an-8-bit-kid/</id>
    <published>2016-04-07T00:00:00+00:00</published>
    <updated>2019-12-06T23:33:59+00:00</updated>
    <author>
      <name>Michal Taszycki</name>
    </author>
    <content type="html">&lt;p&gt;Many of us were lucky enough to grow up with Commodore 64. Some even produced games on it. Even if you are too young to remember, I bet you will find stories of growing up with this computer fascinating.&lt;/p&gt;

&lt;p&gt;It seems we will have a chance to read a new one soon!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Koen De Brabander - founder of the Belgian Commodore 64 Club, is gathering the funds to publish an interesting book.&lt;/p&gt;

&lt;h2 id="bit-kids"&gt;8-BIT KIDS&lt;/h2&gt;

&lt;p&gt;Or in his own words:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(…) a story about the unforgettable summer holidays of our childhood days, endless hours and of having all the time of the world… About friendship, E.T., The A-Team, Knight Rider, and… the Commodore 64. And of course, the 80s feel shining at you from every single page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If that sounds exciting, you should visit his Kickstarter campaign and help him make the book reality.&lt;/p&gt;

&lt;p&gt;You'll find the link at the bottom of the article.&lt;/p&gt;

&lt;p&gt;But that's not all.&lt;/p&gt;

&lt;h2 id="bites-became-a-proud-supporter"&gt;64 Bites became a proud supporter!&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;If you back this book in any form you will receive the first season of 64 bites' videos for free!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://64bites.com/seasons/001-from-basic-to-assembly"&gt;&lt;img alt="64 Bites - Season 1 poster" src="../assets/images/blog/005/season-001-poster.png" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Season 1 is worth $19.99 and contains:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;first nine episodes (50+ minutes of DRM-free videos in total)&lt;/li&gt;
  &lt;li&gt;transcripts (7500+ words)&lt;/li&gt;
  &lt;li&gt;source code examples (450+ LOC) and&lt;/li&gt;
  &lt;li&gt;programming exercises for each episode.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="read-an-exciting-story-of-fellow-8-bit-kids"&gt;Read an exciting story of fellow 8-bit kids!&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.kickstarter.com/projects/508669607/8-bit-kids-growing-up-with-the-commodore-64-hardba"&gt;Back the book and get 64bites videos for free!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.kickstarter.com/projects/508669607/8-bit-kids-growing-up-with-the-commodore-64-hardba"&gt;&lt;img alt="8 BIT KIDS cover" src="../assets/images/blog/005/8-bit-kids-cover.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Your Live Coding Demo is Boring. Let's Fix It!</title>
    <link rel="alternate" href="http://64bites.com/blog/2015/11/19/your-live-demo-is-boring-lets-fix-it/"/>
    <id>http://64bites.com/blog/2015/11/19/your-live-demo-is-boring-lets-fix-it/</id>
    <published>2015-11-19T00:00:00+00:00</published>
    <updated>2019-12-06T23:33:59+00:00</updated>
    <author>
      <name>Michal Taszycki</name>
    </author>
    <content type="html">&lt;p&gt;Recently I've read an interesting blog post by Alan Shrieve &lt;a href="https://inconshreveable.com/11-13-2015/your-live-coding-demo-is-boring/"&gt;Your live coding demo is boring&lt;/a&gt;. In which he expresses categoric statement: "if you write code live on stage, then you are boring me".&lt;/p&gt;

&lt;p&gt;It bothered me more than it should.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Specifically, the lack of any quantifiers near that statement bothered me enough to write this blog post. Had he written "if you come unprepared to a live coding demo, you are boring me" I'd have no problem with that.&lt;/p&gt;

&lt;p&gt;But I get it. &lt;/p&gt;

&lt;h2 id="the-majority-of-live-coding-demos-given-at-conferences-are-boring"&gt;The majority of live coding demos given at conferences are boring.&lt;/h2&gt;

&lt;p&gt;Heck, I delivered boring ones in the past, and there is a high chance you did as well.&lt;/p&gt;

&lt;p&gt;But this is not the reason to stop performing live coding demos, as Alan suggests. Let's just stop giving boring ones. I've seen many great live coding sessions and would love to see even more of them.&lt;/p&gt;

&lt;p&gt;And I do believe I know how to do that.&lt;/p&gt;

&lt;p&gt;I've been giving my share of talks and lightning talks this year. And a live coding demo was an integral part of most of them. Judging on how well they were received, I presume the live coding parts were not that boring.&lt;/p&gt;

&lt;p&gt;Seriously, though. Having done a lot of horrible ones in the past, I've been giving a lot of thought on how do deliver a good live coding demo.&lt;/p&gt;

&lt;p&gt;Let me share what I came up with.&lt;/p&gt;

&lt;h2 id="live-coding-demo-is-a-performance"&gt;Live Coding Demo is a Performance&lt;/h2&gt;

&lt;p&gt;&lt;img alt="Paganfest" src="../assets/images/blog/004/paganfest.jpg" /&gt;
&lt;small&gt;Photo by &lt;a href="https://www.flickr.com/photos/ronocdh/2428738031/in/photolist-4GBVcD-avbkE8-a2q8zw-8xRYxT-65ewhr-2ZEq8L-7amzGJ-7amyhY-7HsrdP-hmP7iz-duuqTr-nCAWmE-7zD8j1-qdJN32-pyc6tw-cLzoCj-cLzgmb-7oSobe-qLcutN-qLcvHb-okUrUD-8oYvL6-4y9nw6-zUa59y-avbny6-2ZAh5v-2ZEtdb-2ZEF3E-2ZzTXX-4RYokG-7mYRYK-qChB9h-7WUHMU-4Dvysc-5SaYrX-92ryx9-aQsKvn-5wZhjU-4SuwQk-c8irz5-dd5Sdg-dd5TGX-dd6141-dd5WiL-dd5SrL-dd5YDx-912WhW-912WoA-briYUp-5B3CtC" nofollow=""&gt;Connor&lt;/a&gt; (cc)&lt;/small&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You are on a stage. The audience is expecting a show. You are a performer, and your job is to entertain them.&lt;/p&gt;

&lt;p&gt;If you come to the stage and expect to wing it, then Alan was right. You are lazy, and your demo will be boring (and you should feel bad).&lt;/p&gt;

&lt;p&gt;You don't expect a musician just to play random stuff at the concert. You expect them to be prepared, play every note perfectly, interact with the audience, have (an optional) lighting system and fireworks synchronized with the music.&lt;/p&gt;

&lt;p&gt;You expect the show!&lt;/p&gt;

&lt;p&gt;Your live coding demo is not different.&lt;/p&gt;

&lt;h2 id="design-the-show"&gt;1. Design the Show&lt;/h2&gt;

&lt;p&gt;&lt;img alt="Design" src="../assets/images/blog/004/design.png" /&gt;&lt;/p&gt;

&lt;p&gt;You are going to type code. Talk and interact with the audience. Make them interested.&lt;/p&gt;

&lt;p&gt;Live coding demo is supposed to be an asset and not a liability.&lt;/p&gt;

&lt;p&gt;If you don't plan to make it entertaining, don't even start. &lt;/p&gt;

&lt;p&gt;Have a good reason for live coding. To prove how simple your library is to use. To evoke nostalgic feeling about good old times. To show-off particular refactoring, editor feature or your skills.&lt;/p&gt;

&lt;p&gt;The live coding demo makes sense only if it is better than a recorded video or code examples on slides.&lt;/p&gt;

&lt;p&gt;You need to know what do you want to show. And how to do that.&lt;/p&gt;

&lt;p&gt;Plan each step of your demo.
Plan when and how should you interact with the audience. (Notice the absence of "if" in that sentence.)
The code can be written in multiple ways. Find the most entertaining, fun or mysterious.&lt;/p&gt;

&lt;h2 id="add-the-fireworks"&gt;2. Add the Fireworks&lt;/h2&gt;

&lt;p&gt;&lt;img alt="Metallica" src="../assets/images/blog/004/metallica.jpg" /&gt;
&lt;small&gt;Photo by &lt;a href="" nofollow=""&gt;Gregory Wild-Smith&lt;/a&gt; (cc)&lt;/small&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You are performing a show. Add the wow-factor.&lt;/p&gt;

&lt;p&gt;Do something unexpected or interesting.&lt;/p&gt;

&lt;p&gt;Let audience interact with what you've written. You've just live-coded a chat or a notification service? Good for you! Let them use it.&lt;/p&gt;

&lt;p&gt;You can pick a subject outside of the audience's area of expertise. Like a Commodore64 assembly at a Ruby conference or metaprogramming in C. &lt;/p&gt;

&lt;p&gt;Use your editor in an obscure and unexpected way. Show-off your excellent Vim skills. It might also be necessary to break out emacs and modify that Perl script.&lt;/p&gt;

&lt;p&gt;Play music with the code or generate graphics live.&lt;/p&gt;

&lt;p&gt;Add a plot twist to your demo. Change one line of code for dramatic results.&lt;/p&gt;

&lt;p&gt;Do something silly like using emojis as method names.&lt;/p&gt;

&lt;p&gt;Make it enjoyable! &lt;/p&gt;

&lt;h2 id="cut-the-scope"&gt;3. Cut the Scope&lt;/h2&gt;

&lt;p&gt;&lt;img alt="Cut the scope" src="../assets/images/blog/004/cut-scope.png" /&gt;&lt;/p&gt;

&lt;p&gt;No matter what you figured out in the previous steps. Cut it in half.&lt;/p&gt;

&lt;p&gt;And then, cut it again.&lt;/p&gt;

&lt;p&gt;I'm serious. You won't have time to show everything you want. Pick just one or two small things to show. Just a few lines of code.&lt;/p&gt;

&lt;p&gt;You don't need to type from scratch. You should prepare most of your program upfront. It's also fine to paste huge chunks of boring code. You can even literally tell your audience:
"let me just paste this huge chunk of boring code first", and they will appreciate that. &lt;/p&gt;

&lt;p&gt;And then, cut the scope again.&lt;/p&gt;

&lt;h2 id="prepare-for-the-worst-case"&gt;4. Prepare for the Worst Case&lt;/h2&gt;

&lt;p&gt;&lt;img alt="Fire" src="../assets/images/blog/004/fire.jpg" /&gt;
&lt;small&gt;"&lt;a href="https://commons.wikimedia.org/wiki/File:FirePhotography.jpg#/media/File:FirePhotography.jpg" rel="nofollow"&gt;FirePhotography&lt;/a&gt;" by Sylvain Pedneault (cc)&lt;/small&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Your computer will break. There will be no desk on the stage. Your hands will be shaking too much to type. You won't have time.&lt;/p&gt;

&lt;p&gt;All kind of things can and will go awry. What if you won't be able to live code at all?&lt;/p&gt;

&lt;p&gt;Prepare for the worst case. Record a video with a live coding that you will explain on stage. Or just make slides with code examples that you will show instead.&lt;/p&gt;

&lt;p&gt;Or even better do both of these and prepare to deliver them as a backup plan. It will give you a peace of mind, and potentially rescue you from an embarrassing situation.&lt;/p&gt;

&lt;p&gt;You don't need to let the audience know there was a live coding planned. The backup plan will be just fine. You'll deliver the demo next time.&lt;/p&gt;

&lt;h2 id="prepare-for-inconveniences"&gt;5. Prepare for Inconveniences&lt;/h2&gt;

&lt;p&gt;&lt;img alt="BSOD" src="../assets/images/blog/004/bsod.jpg" /&gt;
&lt;small&gt;"&lt;a href="https://commons.wikimedia.org/wiki/File:Gdc2010_newell_portal_BSOD.jpg#/media/File:Gdc2010_newell_portal_BSOD.jpg"&gt;Gdc2010 newell portal BSOD&lt;/a&gt;" by &lt;a rel="nofollow" class="external text" href="http://flickr.com/photos/46982319@N06"&gt;Official GDC&lt;/a&gt; (cc)&lt;/small&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The WiFi won't work. You will need to hold a microphone with one hand. The mirroring mode will be impossible so that you will type half blind. You will make a typo and spend too much time debugging. You will forget what you wanted to do.&lt;/p&gt;

&lt;p&gt;You've prepared for the worst case scenario. Now you need to prepare for reality. Some minor things will go wrong, and you will need to adapt and overcome them.&lt;/p&gt;

&lt;p&gt;If you need the Internet for your demo, ask organizers for a private Wi-Fi. Some conferences provide a separate network for speakers. Prepare to use your phone as a hotspot. If possible, run a local server for things you need.&lt;/p&gt;

&lt;p&gt;If you don't get neither a headset microphone nor a stand, just ask someone from an audience to hold it for a few minutes.&lt;/p&gt;

&lt;p&gt;Can't get mirroring working? Try to sit sideways, so you see both audience and the screen.&lt;/p&gt;

&lt;p&gt;Prepare the ready-made versions of your source code in different stages of development. So when you make a typo, you just copy and paste the whole thing instead of debugging the thing.&lt;/p&gt;

&lt;p&gt;Make a joke out of the inconvenience. Pray to the live-coding-gods. Let the audience know that ou got it in a humble but confident and funny way.&lt;/p&gt;

&lt;p&gt;In the worst case, you still have a backup plan.&lt;/p&gt;

&lt;h2 id="practice-practice-practice"&gt;6. Practice, Practice, Practice&lt;/h2&gt;

&lt;p&gt;&lt;img alt="Fire" src="../assets/images/blog/004/dinosaur-hands.jpg" /&gt;
&lt;small&gt;"Corey Haines &amp;amp; Aaron Patterson Programmering" by &lt;a href="http://blog.pluralsight.com/charismatic-duo"&gt;Geoffrey Grosenbach&lt;/a&gt;&lt;/small&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Rehearse the ideal delivery. Rehearse the worst case scenario. Rehearse each possible inconvenience.&lt;/p&gt;

&lt;p&gt;You will feel more comfortable doing something if you've done that before. More practice, more confidence, better delivery, better show.&lt;/p&gt;

&lt;p&gt;While practicing, figure out the stumbling points. Spend more time practicing things that are most problematic. &lt;/p&gt;

&lt;p&gt;But don't worry if you haven't managed to rehearse everything. You'll do just fine. There is high chance that not everything will go wrong:)&lt;/p&gt;

&lt;h2 id="interact-with-your-audience"&gt;7. Interact With Your Audience&lt;/h2&gt;

&lt;p&gt;&lt;img alt="Fire" src="../assets/images/blog/004/bon-jovi.jpg" /&gt;
&lt;small&gt;Photo by &lt;a href="https://www.flickr.com/photos/anirudhkoul/2045497777" rel="nofollow"&gt;Anirudh Koul&lt;/a&gt; (cc)&lt;/small&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you just type your code without saying anything, it will be boring.&lt;/p&gt;

&lt;p&gt;Tell the audience what the hell are you doing and why it's great.&lt;/p&gt;

&lt;p&gt;You designed your show. Ask questions. Let them decide what to type. Tell a joke.&lt;/p&gt;

&lt;p&gt;Someone pointed a typo you've made? Guess what? They are paying attention! Thank them, fix the typo and continue your awesome show.&lt;/p&gt;

&lt;p&gt;Someone asked a question about what you're doing? Good! It means they are not asleep. Answer it with a smile.&lt;/p&gt;

&lt;p&gt;But don't dwell on too specific questions. If answering immediately bothers you, don't be afraid to defer them to the end of your talk.&lt;/p&gt;

&lt;h2 id="deliver-in-a-sandbox-first"&gt;8. Deliver in a Sandbox First&lt;/h2&gt;

&lt;p&gt;&lt;img alt="Metropolitan Opera" src="../assets/images/blog/004/opera.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Don't give your first live coding demo at the big international conference.&lt;/p&gt;

&lt;p&gt;Start with a small group of your colleagues. Then go to your local user group. &lt;/p&gt;

&lt;p&gt;Alternatively, just organize a few of your friends and challenge them to make a 5-minute live coding demos that you deliver only to your group.&lt;/p&gt;

&lt;p&gt;Ask for feedback in a constructive way.&lt;/p&gt;

&lt;p&gt;For example: "What did you like about my demo?" and "What do you think I could improve?".&lt;/p&gt;

&lt;p&gt;Even if you don't receive any feedback, each performance will give you confidence for a bigger audience. &lt;/p&gt;

&lt;h2 id="dont-stop-giving-live-coding-demos1111oneoneone"&gt;9. DON'T STOP GIVING LIVE CODING DEMOS!!!!1111oneoneone&lt;/h2&gt;

&lt;p&gt;&lt;img alt="Repeat" src="../assets/images/blog/004/repeat.png" /&gt;&lt;/p&gt;

&lt;p&gt;It happened. The demo was boring. Everything went horribly wrong.&lt;/p&gt;

&lt;p&gt;So what?&lt;/p&gt;

&lt;p&gt;Figure out what went wrong, and improve it.&lt;/p&gt;

&lt;p&gt;Maybe it was ok, and only you think it was boring.&lt;/p&gt;

&lt;p&gt;Maybe you just need more practice. &lt;/p&gt;

&lt;p&gt;Whatever the reason. Just don't stop.&lt;/p&gt;

&lt;p&gt;The next one will be better. And one day you will deliver a live coding demo. One you will be truly proud of.&lt;/p&gt;

&lt;h2 id="do-you-have-other-ideas-on-how-to-make-live-coding-better"&gt;Do you have other ideas on how to make live coding better?&lt;/h2&gt;

&lt;p&gt;Drop me a line at michal (at) 64bites.com or reach &lt;a href="https://twitter.com/mehowte"&gt;me on twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I'd love to compare notes.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>My Very First Computer Program</title>
    <link rel="alternate" href="http://64bites.com/blog/2015/06/17/my-very-first-computer-program/"/>
    <id>http://64bites.com/blog/2015/06/17/my-very-first-computer-program/</id>
    <published>2015-06-17T00:00:00+00:00</published>
    <updated>2019-12-06T23:33:59+00:00</updated>
    <author>
      <name>Michal Taszycki</name>
    </author>
    <content type="html">&lt;p&gt;The first program I've ever written had only two lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;
10 PRINT "COMMODORE 64"
20 GOTO 10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once I've run it. My life changed forever…&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="long-time-ago"&gt;Long time ago…&lt;/h2&gt;

&lt;p&gt;When I was in primary school. I used to play games on my friend's Commodore 64. We used to put the cassette in, press play on tape and wait patiently for 5-20 minutes until the game loaded.&lt;/p&gt;

&lt;p&gt;Or not…&lt;/p&gt;

&lt;p&gt;In that case, we needed to rewind the tape and repeat the whole process. &lt;/p&gt;

&lt;p&gt;Fun times.&lt;/p&gt;

&lt;p&gt;Some time later, I've got my C64 from my grandpa. 
However, as soon as I turned it on, I've discovered that my friend owned a Final III cartridge that I didn't have. It meant that instead of seeing familiar window-based GUI, I've seen only the blinking cursor under the word &lt;a href="/episodes/002-basics-basics"&gt;READY&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;img alt="sdfsdf" src="../assets/images/blog/003/final-3-ready.gif" /&gt;&lt;/p&gt;

&lt;p&gt;This, in turn, meant, that I was unable to load any games.&lt;/p&gt;

&lt;p&gt;The horror!&lt;/p&gt;

&lt;p&gt;Fortunately, with a help of a more computer savvy friend and a manual, I've learned how to use the LOAD and RUN commands. But the blinking cursor was somehow inviting me to do more with it. I knew that you could do more than play games on a C64. I just didn't know how.&lt;/p&gt;

&lt;h2 id="typing-in-programs"&gt;Typing in programs&lt;/h2&gt;

&lt;p&gt;I started digging deeper into the manual, and I've found a part about writing programs. Soon, I've typed the following two lines.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;
10 PRINT "COMMODORE 64"
20 GOTO 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As soon as I've run it, the computer started printing its name endlessly.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Program printing 'commodore 64' endlessly" src="../assets/images/blog/003/program-result.png" /&gt;&lt;/p&gt;

&lt;p&gt;Now it doesn't seem like a significant achievement. But for me, it was mesmerizing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I wrote my first program.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I didn't stop there. After reading a manual, I've learned about IF statements, FOR loops, and I was somewhat able to write a few simple programs.
But the examples in the handbook were kind of boring. Without access to the Internet (that was Poland in early nineties) and no books about programming C64 in the library, the only place I could find any resources on programming were slowly dying computer magazines.&lt;/p&gt;

&lt;p&gt;In each of them, you could find a program or two to type in on your computer. &lt;/p&gt;

&lt;p&gt;&lt;img alt="sdfsdf" src="../assets/images/blog/003/bajtek-listing.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Some were written in pure BASIC. In those rare cases, you could at least learn something by reading the code. But most were a machine language programs encoded in enormous &lt;a href="/episodes/006-read-data"&gt;DATA sequences&lt;/a&gt;, like the one below.&lt;/p&gt;

&lt;p&gt;&lt;img alt="sdfsdf" src="../assets/images/blog/003/bajtek-listing-data.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Imagine typing this monstrosity.&lt;/p&gt;

&lt;p&gt;Not hardcore enough? Then imagine you don't know how to save this program on a tape, and you press reset button by accident at line 240.&lt;/p&gt;

&lt;p&gt;Yes, my early programming experiences involved a lot of crying in frustration.&lt;/p&gt;

&lt;p&gt;But I still remember this time fondly. I didn't exactly knew what I was doing. But every time I typed a long program, and it finally worked, I felt like a magician.&lt;/p&gt;

&lt;h2 id="commodore-64-lives"&gt;Commodore 64 lives!&lt;/h2&gt;

&lt;p&gt;Those experiences were directly responsible for my becoming a professional software developer. Although I couldn't believe at first that C does not need its lines numbered like &lt;a href="/episodes/003-programs-in-basic"&gt;BASIC does&lt;/a&gt;. Even though computers were not so magical anymore, once I've learned how they work.&lt;/p&gt;

&lt;p&gt;I went back to C64 few years ago to master the 6502 assembly finally and to create a game, a demo and learn mysterious hacks that made this computer, so fun to program. Now, everything is much simpler to learn than when I was a kid, but it's still as fun as it was before.&lt;/p&gt;

&lt;p&gt;Seeing a subroutine called from an interrupt for the first time, was the same kind of magical experience for me. But that's a story for another article.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>64 Bites is Live!</title>
    <link rel="alternate" href="http://64bites.com/blog/2015/06/11/64bites-is-live/"/>
    <id>http://64bites.com/blog/2015/06/11/64bites-is-live/</id>
    <published>2015-06-11T00:00:00+00:00</published>
    <updated>2019-12-06T23:33:59+00:00</updated>
    <author>
      <name>Michal Taszycki</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="/"&gt;64 Bites&lt;/a&gt; - Short and Sweet Commodore 64 Programming Screencasts has been published on Thursday, 11th of June 2015. The easiest way to start learning how to program your beloved C64 is finally within your reach.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="what-is-the-64-bites-anyway"&gt;What is the 64 Bites anyway?&lt;/h2&gt;

&lt;p&gt;It's a series of short weekly videos that are designed to teach you programming the Commodore 64 in small, logical steps.&lt;/p&gt;

&lt;p&gt;Each episode is about 5 minutes long (so you will find a time to actually watch it). Videos are self-contained focus on a small "bite" of programming knowledge. &lt;/p&gt;

&lt;p&gt;You can browse the list of &lt;a href="/episodes/all"&gt;all episodes&lt;/a&gt; and even watch &lt;a href="/episodes/free"&gt;some of them&lt;/a&gt; for free.&lt;/p&gt;

&lt;h2 id="why-does-it-start-from-scratch"&gt;Why does it start from scratch?&lt;/h2&gt;

&lt;p&gt;The series is designed to teach anyone C64 development. Even people who haven't had any experience with 8-bit computers. 
Therefore first few episodes focus on BASIC. It is available as soon as you turn the computer (or the emulator). BASIC is also easy to use and powerful to make few interesting things with it.&lt;/p&gt;

&lt;p&gt;&lt;img alt="10 print chr$(205.5+rnd(1)); : GOTO 10" src="../assets/images/blog/002/10-print.png" /&gt;&lt;/p&gt;

&lt;p&gt;Although the series starts with relatively basic concepts (pun intended), seasoned veterans will most likely find an interesting thing or two in each episode. Each video delves pretty deep in the technique described.&lt;/p&gt;

&lt;h2 id="will-it-cover-advanced-stuff"&gt;Will it cover advanced stuff?&lt;/h2&gt;

&lt;p&gt;Starting from Episode #007 we'll jump straight into the assembly language and we will mostly stay with it later in the series.&lt;/p&gt;

&lt;p&gt;We will cover more advanced topics like sprite multiplexing, opening borders, interrupts in the future.&lt;/p&gt;

&lt;p&gt;To make the learning as painless as possible, the series has been organised in a logical order. For example we will learn about raster interrupts and scrolling before we open the borders.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Order of 64 Bites episodes" src="../assets/images/blog/002/episodes-order.png" /&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
